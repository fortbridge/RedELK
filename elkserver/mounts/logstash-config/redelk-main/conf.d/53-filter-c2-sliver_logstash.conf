# Part of RedELK
#
# In this file we configure the logstash filters for Sliver logs
#
# Author: hypnoticpattern
#

filter {
  if [infra][log][type] == "rtops" and [c2][program] == "sliver" {
    if [c2][log][type] == "events" {

      # Removing periodic commands run by the C2 server "GetSessions", "GetBeacons" and "GetVersion"
      if "info" in [level] and "GetSessions" in [msg] {      
        drop {}
      }

      if "info" in [level] and "GetBeacons" in [msg] {      
        drop {}
      }

      if "info" in [level] and "GetVersion" in [msg] {      
        drop {}
      }
      
      # Remove base64 encoded payload from the Upload command
      if "Upload" in [msg] and "Data" in [msg] {
        mutate {
          gsub => [ "[msg]", '\\"Data\\":\\"[a-zA-Z0-9+\/]+={0,2}\\",', "" ]
        } 
      }
      
      json {
        source => "msg"
      }

      # Remove base64 encoded payload from the Upload command
      if [msg][Upload] {
        mutate {
          
          remove_field => ["time"]   
        }
      }

      date {
        match => [ "[time]", "ISO8601" ]
        target => "@timestamp"
        timezone => "Etc/UTC"
      }

      mutate {
        copy => { "@timestamp" => "[c2][timestamp]" }        
        remove_field => ["time"]   
      }

      mutate {        
        rename   => { "[msg]" => "[c2][message]" }
      }

      if [method] {
        mutate {
          replace => { "[c2][log][type]" => "c2_command" }
          gsub => [ "[method]", "/rpcpb\.SliverRPC/", "" ]
        }
      }

      mutate {
        rename  => { "[method]" => "[c2][command][name]" }
        rename  => { "[request]" => "[c2][command][arguments]" }
        rename  => { "[session]" => "[c2][implant]" }        
      }

      json {
        source => "[c2][command][arguments]"
        target => "[c2][command][arguments]"
      }

      json {
        source => "[c2][implant]"
        target => "[c2][implant]"
      }

      if [c2][command][arguments][Request][SessionID] {
        mutate {
          rename  => { "[c2][command][arguments][Request][SessionID]" => "[implant][id]" }
        }
      }

      if [c2][implant][Hostname] {
        mutate {
          copy  => { "[c2][implant][Hostname]" => "[host][name]" }
        }
      }

      if [c2][implant][Username] {
        mutate {
          copy  => { "[c2][implant][Username]" => "[user][name]" }
        }
      }

      # Logstash errors out converting TunnelID to long. Forcing casting to string.
      if [c2][command][arguments][TunnelID] 
      {
        mutate {
          convert => { "[c2][command][arguments][TunnelID]" => "string" }
        }
      }

      # Convert c2.command.arguments.ID to string to avoid Elasticsearch mapper_parsing_exception
      if [c2][command][arguments][ID] {
        mutate {
          convert => { "[c2][command][arguments][ID]" => "string" }
        }
      }

      if [c2][command][name] == "LootAdd" {
        if [c2][command][arguments][Credential] {
          mutate {
            replace => { "[c2][log][type]" => "credentials"}                          
          }

          # User/Password
          if [c2][command][arguments][CredentialType] == 1 {
            mutate {
              copy => { "[c2][command][arguments][Credential][User]" => "[creds][username]" }
              copy => { "[c2][command][arguments][Credential][Password]" => "[creds][credential]"}          
            }
          }

          # API Key
          if [c2][command][arguments][CredentialType] == 1 {
            mutate {
              copy => { "[c2][command][arguments][Credential][Name]" => "[creds][username]"}
              copy => { "[c2][command][arguments][Credential][APIKey]" => "[creds][credential]"}          
            }
          }
        }
      }
      
      # Handle new Sliver session
      if [level] == "warning" and [Session] {

        grok {
          match => { "[Session][RemoteAddress]" => "%{IP:[host][ip_ext]}:%{POSINT}"}
        }

      if [Session][ActiveC2]
      {
        mutate {
          convert => { "[Session][ActiveC2]" => "string" }
        }
      }

        mutate {          
          replace  => { "[c2][log][type]" => "implant_newsession" }
          rename  => { "[Session][OS]" => "[host][os][family]" }
          rename  => { "[Session][Hostname]" => "[host][name]" }          
          rename  => { "[Session][ID]" => "[implant][id]" } 
          rename  => { "[Session][LastCheckin]" => "[implant][checkin]" }
          rename  => { "[Session][Name]" => "[implant][name]" }
          rename  => { "[Session][Username]" => "[user][name]" }
          rename  => { "[Session][PID]" => "[process][pid]" }
          rename  => { "[Session][Filename]" => "[process][name]" }
          rename  => { "[Session][Transport]" => "[c2][listener][type]" }
          rename  => { "[Session][ActiveC2]" => "[implant][url]" }
        }

        date {
          match => [ "[implant][checkin]", "UNIX" ]
          target => "[implant][checkin]"
          timezone => "Etc/UTC"
        }

      }     
    }
  }
}
